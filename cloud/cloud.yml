AWSTemplateFormatVersion: "2010-09-09"
Resources: 
  RootRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
                - 'apigateway.amazonaws.com'
            Action: 
              - "sts:AssumeRole"
      RoleName: "nv-role"        
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/AdministratorAccess"
        - "arn:aws:iam::aws:policy/AWSLambda_FullAccess"
        - "arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess"
        - "arn:aws:iam::aws:policy/AmazonAPIGatewayAdministrator"
        
      Path: "/"

  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
  ApiFunction: # Adds a GET api endpoint at "/" to the ApiGatewayApi via an Api event
    Type: AWS::Serverless::Function
    Properties:
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /
            Method: get
            RestApiId:
              Ref: ApiGatewayApi
      Runtime: python3.7
      Handler: index.handler
      InlineCode: |
        def handler(event, context):
            return {'body': 'Hello World!', 'statusCode': 200}
  ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        ApiKeySourceType: HEADER
        Description: An API Gateway with a Lambda Integration
        EndpointConfiguration:
          Types:
            - EDGE
        Name: lambda-api  
  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'lambda'
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt RootRole.Arn
        IntegrationHttpMethod: GET
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub 
        - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaFunction.Arn}/invocations'
        -  lambdaArn: !GetAtt lambdaFunction.Arn
      OperationName: 'lambda'
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayModel:
    Type: AWS::ApiGateway::Model
    Properties:
       ContentType: 'application/json'
       RestApiId: !Ref ApiGatewayRestApi
       Schema: {}    
  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      Description: Lambda API Stage prod
      RestApiId: !Ref ApiGatewayRestApi
      StageName: 'v0'    
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayMethod
    Properties:
      Description: Lambda API Deployment
      RestApiId: !Ref ApiGatewayRestApi    
      
# AWSTemplateFormatVersion: '2010-09-09'
# Transform: AWS::Serverless-2016-10-31
# Description: AWS SAM template with a simple API definition
# Resources:
#   ApiGatewayApi:
#     Type: AWS::Serverless::Api
#     Properties:
#       StageName: prod
#   ApiFunction: # Adds a GET api endpoint at "/" to the ApiGatewayApi via an Api event
#     Type: AWS::Serverless::Function
#     Properties:
#       Events:
#         ApiEvent:
#           Type: Api
#           Properties:
#             Path: /
#             Method: get
#             RestApiId:
#               Ref: ApiGatewayApi
#       Runtime: python3.7
#       Handler: index.handler
#       InlineCode: |
#         def handler(event, context):
#             return {'body': 'Hello World!', 'statusCode': 200}
